include /etc/nginx/modules-enabled/*;
worker_processes  1;
error_log  /dev/stdout warn;

env ENV;

events {
    worker_connections 4096;
}

http {
    include       mime.types;
    default_type  text/html;

    # requied for shared_lua_dict
    variables_hash_max_size 4096;
    map_hash_bucket_size 128;

    # hide the version in the Server header
    server_tokens off;

    # use real client ip rather than ALB address
    set_real_ip_from 10.0.0.0/8;
    set_real_ip_from 172.16.0.0/12;
    set_real_ip_from 192.168.0.0/16;
    real_ip_header X-Forwarded-For;

    # apache-style combined log format
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent"';

    access_log  /dev/stdout  main;

    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     on;
    keepalive_timeout  130;
    gzip  on;

    # microcaching
    # The proxy_cache_path will be used to store responses for 1s on select
    # endpoints. This improves performance with minimal impact.
    proxy_cache_path /tmp/cache keys_zone=cache:10m levels=1:2 inactive=600s max_size=100m;
    # This line tells nginx to intercept any 4xx or 5xx code that is returned by a proxy_pass
    # directive and resolve it using its error_page directive. We use this to set a fallback
    # from vue to ember.
    proxy_intercept_errors on;

    lua_shared_dict upstream 24k;
    init_by_lua_block {
        local env = os.getenv("ENV");
        ngx.shared.upstream:set("env", env)
        ngx.log(ngx.WARN, "Starting Live Closed Caption web client Nginx with ENV=" .. env)
    }

    upstream app {
        server 0.0.0.0:3000 max_fails=0;
    }

    server {
        listen 8080;
        server_name _;

        location / {
            include headers.conf;
            include microcache.conf;
            proxy_pass http://app;
        }

        # test endpoint
        location /_test {
            include headers.conf;
            add_header Content-Type application/json;
            return 200 '{"status": "ok"}';
        }

        location /_health {
            access_log off;
            return 200;
        }
    }
}
